@model FinanceAdvisor.Web.Models.UpdateConsultationViewModel

@{
    ViewData["Title"] = "Update Consultation";
}

<h2>Update Consultation</h2>

<form asp-action="Update" asp-controller="ConsultationManagement" asp-area="Admin" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />

    <div class="mb-3">
        <label asp-for="ConsultationType" class="form-label">Consultation Type</label>
        <select asp-for="ConsultationType" class="form-control" id="consultationTypeSelect" onchange="loadAdvisorsByType()">
            @foreach (FinanceAdvisor.Domain.Enums.ConsultationType type in Enum.GetValues(typeof(FinanceAdvisor.Domain.Enums.ConsultationType)))
            {
                int intVal = (int)type;
                string selected = Model.ConsultationType == type ? "selected" : "";
            }
            @* Write options outside the block *@
            @foreach (FinanceAdvisor.Domain.Enums.ConsultationType type in Enum.GetValues(typeof(FinanceAdvisor.Domain.Enums.ConsultationType)))
            {
                int intVal = (int)type;
                string selected = Model.ConsultationType == type ? "selected" : "";
                @:<option value="@intVal" @selected>@type</option>
            }


        </select>
        <span asp-validation-for="ConsultationType" class="text-danger"></span>
    </div>


    <div class="mb-3">
        <label asp-for="AdvisorId" class="form-label">Advisor</label>
        <select asp-for="AdvisorId" class="form-control" id="advisorSelect">
            @if ((Guid.Empty != (Model.AdvisorId)) && !string.IsNullOrEmpty(Model.AdvisorName))
            {
                <option value="@Model.AdvisorId" selected>@Model.AdvisorName</option>
            }
            else
            {
                <option value="" selected>-- Select an Advisor --</option>
            }
        </select>
        <span asp-validation-for="AdvisorId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="ScheduledAt" class="form-label">Scheduled Date & Time</label>
        <input asp-for="ScheduledAt" type="datetime-local" class="form-control"
               value="@Model.ScheduledAt.ToString("yyyy-MM-ddTHH:mm")" />
        <span asp-validation-for="ScheduledAt" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Status" class="form-label">Status</label>
        <select asp-for="Status" class="form-control" asp-items="Html.GetEnumSelectList<FinanceAdvisor.Domain.Enums.Status>()"></select>
        <span asp-validation-for="Status" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Update</button>
    <a href="/Admin/ConsultationManagement" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const accessToken = "@ViewBag.AccessToken";

        const consultationToSpecialization = {
            0: "Credit",       // ConsultationType.CreditAdvisory = 0
            1: "Investment",   // ConsultationType.InvestmentAdvisory = 1
            2: "Security"      // ConsultationType.SecurityAdvisory = 2
        };

        async function loadAdvisorsByType() {
            const typeSelect = document.getElementById("consultationTypeSelect");
            const advisorSelect = document.getElementById("advisorSelect");
            const selectedType = typeSelect.value;

            if (!selectedType) return;

            try {
                const specialization = consultationToSpecialization[selectedType];
                if (!specialization) {
                    console.error("Unsupported consultation type:", selectedType);
                    return;
                }

                const response = await fetch(`https://localhost:7206/api/v1/Advisors/specialization/${specialization}`, {
                    headers: {
                        "Authorization": `Bearer ${accessToken}`,
                        "Content-Type": "application/json"
                    }
                });

                if (!response.ok) {
                    console.error("Error fetching advisors", response.status);
                    return;
                }

                const advisors = await response.json();

                // Save current selected advisor id before clearing options
                const currentAdvisorId = advisorSelect.value;

                // Clear all advisor options except the first one (assumed default option)
                // If you want to clear all, including default, you can do advisorSelect.innerHTML = '';
                // But probably want to keep default placeholder:
                advisorSelect.options.length = 1;  // Removes all options except index 0

                // Add new advisors
                advisors.forEach(advisor => {
                    const opt = document.createElement("option");
                    opt.value = advisor.advisorId;
                    opt.textContent = advisor.advisorName;
                    advisorSelect.appendChild(opt);
                });

                // Restore selected advisor if it exists in new options, else fallback to default
                if (Array.from(advisorSelect.options).some(opt => opt.value === currentAdvisorId)) {
                    advisorSelect.value = currentAdvisorId;
                } else {
                    advisorSelect.value = "";  // reset to default
                }

            } catch (err) {
                console.error("Error loading advisors:", err);
            }
        }

        // Load advisors on page load for current ConsultationType
        document.addEventListener("DOMContentLoaded", () => {
            loadAdvisorsByType();
        });
    </script>
}
