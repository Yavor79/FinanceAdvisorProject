@model FinanceAdvisor.Web.Models.CreateConsultationViewModel

@{
    ViewData["Title"] = "Create Consultation";
}

<h2>Create Consultation</h2>

<form asp-controller="ConsultationManagement" asp-action="Create" method="post">
    @Html.AntiForgeryToken();

    <!-- Consultation type -->
    <div class="mb-3">
        <label asp-for="ConsultationType" class="form-label">Consultation Type</label>
        <select asp-for="ConsultationType" class="form-control"
                asp-items="Html.GetEnumSelectList<FinanceAdvisor.Domain.Enums.ConsultationType>()"
                id="consultationTypeSelect" onchange="loadAdvisorsByType()">
            <option value="">Select one</option>
        </select>
        <span asp-validation-for="ConsultationType" class="text-danger"></span>
    </div>

    <!-- Client selection -->
    <div class="mb-3">
        <label asp-for="ClientId" class="form-label">Client</label>
        <select asp-for="ClientId" class="form-control"
                asp-items="@(new SelectList(Model.ChooseUsers, "Id", "UserName"))">
            <option value="">-- Select a Client --</option>
        </select>
        <span asp-validation-for="ClientId" class="text-danger"></span>
    </div>

    <!-- Advisor selection -->
    <div class="mb-3">
        <label asp-for="AdvisorId" class="form-label">Advisor</label>
        <select asp-for="AdvisorId" class="form-control" id="advisorSelect">
            <option value="">-- Select an Advisor --</option>
        </select>
        <span asp-validation-for="AdvisorId" class="text-danger"></span>
    </div>

    <!-- Scheduled date/time -->
    <div class="mb-3">
        <label asp-for="ScheduledDateTime" class="form-label"></label>
        <input asp-for="ScheduledDateTime" class="form-control" type="datetime-local"
               value="@Model.ScheduledDateTime.ToString("yyyy-MM-ddTHH:mm")" />
        <span asp-validation-for="ScheduledDateTime" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
    <a href="/Admin/ConsultationManagement" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const accessToken = "@ViewBag.AccessToken";

        const consultationToSpecialization = {
            0: "Credit",       // ConsultationType.CreditAdvisory
            1: "Investment",   // ConsultationType.InvestmentAdvisory
            2: "Security"      // ConsultationType.SecurityAdvisory
        };


        async function loadAdvisorsByType() {
            const typeSelect = document.getElementById("consultationTypeSelect");
            const advisorSelect = document.getElementById("advisorSelect");
            const selectedType = typeSelect.value;

            advisorSelect.innerHTML = '<option value="">-- Select an Advisor --</option>';

            if (!selectedType) return;
            
            try {
                const specialization = consultationToSpecialization[selectedType];
                if (!specialization) {
                    console.error("Unsupported consultation type:", selectedType);
                    return;
                }

                const response = await fetch(`https://localhost:7206/api/v1/Advisors/specialization/${specialization}`, {
                    headers: {
                        "Authorization": `Bearer ${accessToken}`, // from Razor
                        "Content-Type": "application/json"
                    }
                });

                if (!response.ok) {
                    console.error("Error fetching advisors", response.status);
                    return;
                }

                const advisors = await response.json();
                advisors.forEach(advisor => {
                    const opt = document.createElement("option");
                    opt.value = advisor.advisorId;
                    opt.textContent = advisor.advisorName;
                    advisorSelect.appendChild(opt);
                });
            } catch (err) {
                console.error("Error loading advisors:", err);
            }
        }


    </script>

}
