// <auto-generated />
using System;
using FinanceAdvisor.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceAdvisor.Infrastructure.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20250714154718_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Advisor", b =>
                {
                    b.Property<Guid>("AdvisorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvisorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Consultation", b =>
                {
                    b.Property<Guid>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConsultationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ConsultationId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ClientId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.CreditConsultationCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ClientId");

                    b.ToTable("CreditConsultationCycles");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditConsultationCycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditConsultationCycleId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.WeeklyAvailability", b =>
                {
                    b.Property<Guid>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("AvailabilityId");

                    b.ToTable("WeeklyAvailabilities");
                });

            modelBuilder.Entity("FinanceAdvisor.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Advisor", b =>
                {
                    b.HasOne("FinanceAdvisor.Infrastructure.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("FinanceAdvisor.Domain.Entities.Advisor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Consultation", b =>
                {
                    b.HasOne("FinanceAdvisor.Domain.Entities.Advisor", "Advisor")
                        .WithMany("Consultations")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceAdvisor.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.CreditConsultationCycle", b =>
                {
                    b.HasOne("FinanceAdvisor.Domain.Entities.Advisor", "Advisor")
                        .WithMany("CreditConsultationCycles")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceAdvisor.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Meeting", b =>
                {
                    b.HasOne("FinanceAdvisor.Domain.Entities.CreditConsultationCycle", "CreditConsultationCycle")
                        .WithMany("Meetings")
                        .HasForeignKey("CreditConsultationCycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditConsultationCycle");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.Advisor", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("CreditConsultationCycles");
                });

            modelBuilder.Entity("FinanceAdvisor.Domain.Entities.CreditConsultationCycle", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
